2021-04-20 20:38:05 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Столбец "TITLE" не найден
Column "TITLE" not found; SQL statement:
 INSERT INTO products (title, price) VALUES ('Jack', 100), ('Bob', 100);  COMMIT; [42122-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.table.Table.getColumn(Table.java:703)
	at org.h2.command.Parser.parseColumn(Parser.java:1450)
	at org.h2.command.Parser.parseColumnList(Parser.java:1435)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1804)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.command.CommandList.executeRemaining(CommandList.java:54)
	at org.h2.command.CommandList.update(CommandList.java:67)
	at org.h2.command.CommandList.executeRemaining(CommandList.java:59)
	at org.h2.command.CommandList.update(CommandList.java:67)
	at org.h2.command.Command.executeUpdate(Command.java:251)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:191)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:152)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)
	at org.hibernate.engine.query.spi.NativeSQLQueryPlan.performExecuteUpdate(NativeSQLQueryPlan.java:107)
	at org.hibernate.internal.SessionImpl.executeNativeUpdate(SessionImpl.java:1509)
	at org.hibernate.query.internal.NativeQueryImpl.doExecuteUpdate(NativeQueryImpl.java:298)
	at org.hibernate.query.internal.AbstractProducedQuery.executeUpdate(AbstractProducedQuery.java:1672)
	at ru.geekbrains.spring.one.utils.HibernateUtils.init(HibernateUtils.java:26)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:389)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:333)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:157)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1778)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:602)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:524)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1380)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:887)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:791)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:229)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1204)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:564)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:524)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1380)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:887)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:791)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:229)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1204)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:564)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:524)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1380)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:887)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:791)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:229)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1204)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:564)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:524)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:944)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:144)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:769)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:761)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:426)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:326)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1313)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1302)
	at ru.geekbrains.spring.one.SpringOneApplication.main(SpringOneApplication.java:23)
2021-04-23 00:21:14 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Таблица "UNIVERSITIES" не найдена
Table "UNIVERSITIES" not found; SQL statement:
 CREATE TABLE products (id bigserial PRIMARY KEY, title VARCHAR(255), price int, category_id bigint REFERENCES universities (id)); [42102-200]
2021-04-23 00:22:33 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Таблица "UNIVERSITIES" не найдена
Table "UNIVERSITIES" not found; SQL statement:
 CREATE TABLE products (id bigserial PRIMARY KEY, title VARCHAR(255), price int, category_id bigint REFERENCES universities (id)); [42102-200]
2021-04-23 00:25:36 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Таблица "CATEGORIES" не найдена
Table "CATEGORIES" not found; SQL statement:
 CREATE TABLE products (id bigserial PRIMARY KEY, title VARCHAR(255), price int, category_id bigint REFERENCES categories (id)); [42102-200]
2021-04-23 00:26:33 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Таблица "CATEGORY" не найдена
Table "CATEGORY" not found; SQL statement:
 CREATE TABLE products (id bigserial PRIMARY KEY, title VARCHAR(255), price int, category_id bigint REFERENCES category (id)); [42102-200]
2021-04-23 00:26:55 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Таблица "CATEGORIES" не найдена
Table "CATEGORIES" not found; SQL statement:
 CREATE TABLE products (id bigserial PRIMARY KEY, title VARCHAR(255), price int, category_id bigint REFERENCES categories (id)); [42102-200]
2021-04-23 00:27:58 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL " INSERT INTO CATEGORIES (TITLE) VALUES ('Food',)[*], ('Furniture');  COMMIT;  BEGIN;  DROP TABLE IF EXISTS PRODUCTS CASCADE; CREATE TABLE PRODUCTS (ID BIGSERIAL PRIMARY KEY, TITLE VARCHAR(255), PRICE INT, CATEGORY_ID BIGINT REFERENCES CATEGORIES (ID)); INSERT INTO PRODUCTS (TITLE, PRICE, CATEGORY_ID) VALUES ('Bread', 25, 1), ('Milk', 80, 1); ('Table', 80 ,2); ('Chair', 80, 2);  COMMIT; "; ожидалось "DEFAULT, NOT, EXISTS, INTERSECTS, UNIQUE"
Syntax error in SQL statement " INSERT INTO CATEGORIES (TITLE) VALUES ('Food',)[*], ('Furniture');  COMMIT;  BEGIN;  DROP TABLE IF EXISTS PRODUCTS CASCADE; CREATE TABLE PRODUCTS (ID BIGSERIAL PRIMARY KEY, TITLE VARCHAR(255), PRICE INT, CATEGORY_ID BIGINT REFERENCES CATEGORIES (ID)); INSERT INTO PRODUCTS (TITLE, PRICE, CATEGORY_ID) VALUES ('Bread', 25, 1), ('Milk', 80, 1); ('Table', 80 ,2); ('Chair', 80, 2);  COMMIT; "; expected "DEFAULT, NOT, EXISTS, INTERSECTS, UNIQUE"; SQL statement:
 INSERT INTO categories (title) VALUES ('Food',), ('Furniture');  COMMIT;  BEGIN;  DROP TABLE IF EXISTS products CASCADE; CREATE TABLE products (id bigserial PRIMARY KEY, title VARCHAR(255), price int, category_id bigint REFERENCES categories (id)); INSERT INTO products (title, price, category_id) VALUES ('Bread', 25, 1), ('Milk', 80, 1); ('Table', 80 ,2); ('Chair', 80, 2);  COMMIT;  [42001-200]
2021-04-23 00:30:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL " ('Table'[*], 80 ,2); ('Chair', 80, 2);  COMMIT; "; ожидалось "(, WITH, SELECT, TABLE, VALUES"
Syntax error in SQL statement " ('Table'[*], 80 ,2); ('Chair', 80, 2);  COMMIT; "; expected "(, WITH, SELECT, TABLE, VALUES"; SQL statement:
 ('Table', 80 ,2); ('Chair', 80, 2);  COMMIT;  [42001-200]
2021-04-23 00:32:28 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Таблица "CATEGORY" не найдена
Table "CATEGORY" not found; SQL statement:
select category0_.id as id1_0_0_, category0_.title as title2_0_0_ from category category0_ where category0_.id=? [42102-200]
2021-04-23 00:32:30 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Таблица "CATEGORY" не найдена
Table "CATEGORY" not found; SQL statement:
select category0_.id as id1_0_0_, category0_.title as title2_0_0_ from category category0_ where category0_.id=? [42102-200]
2021-04-23 00:34:12 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Таблица "CATEGORY" не найдена
Table "CATEGORY" not found; SQL statement:
select product0_.id as id1_1_0_, product0_.category_id as category4_1_0_, product0_.price as price2_1_0_, product0_.title as title3_1_0_, category1_.id as id1_0_1_, category1_.title as title2_0_1_ from products product0_ left outer join category category1_ on product0_.category_id=category1_.id where product0_.id=? [42102-200]
2021-04-23 00:34:23 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Таблица "CATEGORY" не найдена
Table "CATEGORY" not found; SQL statement:
select category0_.id as id1_0_0_, category0_.title as title2_0_0_ from category category0_ where category0_.id=? [42102-200]
2021-04-23 11:47:23 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "  SELECT * FROM CATEGORIES WHERE TITLE FOOD[*]  COMMIT;  BEGIN;  DROP TABLE IF EXISTS PRODUCTS CASCADE; CREATE TABLE PRODUCTS (ID BIGSERIAL PRIMARY KEY, TITLE VARCHAR(255), PRICE INT, CATEGORY_ID BIGINT REFERENCES CATEGORIES (ID)); INSERT INTO PRODUCTS (TITLE, PRICE, CATEGORY_ID) VALUES ('Bread', 25, 1), ('Milk', 80, 1), ('Table', 80 ,2), ('Chair', 80, 2);  COMMIT; "
Syntax error in SQL statement "  SELECT * FROM CATEGORIES WHERE TITLE FOOD[*]  COMMIT;  BEGIN;  DROP TABLE IF EXISTS PRODUCTS CASCADE; CREATE TABLE PRODUCTS (ID BIGSERIAL PRIMARY KEY, TITLE VARCHAR(255), PRICE INT, CATEGORY_ID BIGINT REFERENCES CATEGORIES (ID)); INSERT INTO PRODUCTS (TITLE, PRICE, CATEGORY_ID) VALUES ('Bread', 25, 1), ('Milk', 80, 1), ('Table', 80 ,2), ('Chair', 80, 2);  COMMIT; "; SQL statement:
  SELECT * FROM categories WHERE title Food  COMMIT;  BEGIN;  DROP TABLE IF EXISTS products CASCADE; CREATE TABLE products (id bigserial PRIMARY KEY, title VARCHAR(255), price int, category_id bigint REFERENCES categories (id)); INSERT INTO products (title, price, category_id) VALUES ('Bread', 25, 1), ('Milk', 80, 1), ('Table', 80 ,2), ('Chair', 80, 2);  COMMIT;  [42000-200]
2021-04-23 11:48:49 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL " SELECT * FROM CATEGORIES WHERE TITLE FOOD[*]  COMMIT;  BEGIN;  DROP TABLE IF EXISTS PRODUCTS CASCADE; CREATE TABLE PRODUCTS (ID BIGSERIAL PRIMARY KEY, TITLE VARCHAR(255), PRICE INT, CATEGORY_ID BIGINT REFERENCES CATEGORIES (ID)); INSERT INTO PRODUCTS (TITLE, PRICE, CATEGORY_ID) VALUES ('Bread', 25, 1), ('Milk', 80, 1), ('Table', 80 ,2), ('Chair', 80, 2);  COMMIT; "
Syntax error in SQL statement " SELECT * FROM CATEGORIES WHERE TITLE FOOD[*]  COMMIT;  BEGIN;  DROP TABLE IF EXISTS PRODUCTS CASCADE; CREATE TABLE PRODUCTS (ID BIGSERIAL PRIMARY KEY, TITLE VARCHAR(255), PRICE INT, CATEGORY_ID BIGINT REFERENCES CATEGORIES (ID)); INSERT INTO PRODUCTS (TITLE, PRICE, CATEGORY_ID) VALUES ('Bread', 25, 1), ('Milk', 80, 1), ('Table', 80 ,2), ('Chair', 80, 2);  COMMIT; "; SQL statement:
 SELECT * FROM categories WHERE title Food  COMMIT;  BEGIN;  DROP TABLE IF EXISTS products CASCADE; CREATE TABLE products (id bigserial PRIMARY KEY, title VARCHAR(255), price int, category_id bigint REFERENCES categories (id)); INSERT INTO products (title, price, category_id) VALUES ('Bread', 25, 1), ('Milk', 80, 1), ('Table', 80 ,2), ('Chair', 80, 2);  COMMIT;  [42000-200]
2021-04-23 11:49:07 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL " SELECT * FROM CATEGORIES   COMMIT  BEGIN[*];  DROP TABLE IF EXISTS PRODUCTS CASCADE; CREATE TABLE PRODUCTS (ID BIGSERIAL PRIMARY KEY, TITLE VARCHAR(255), PRICE INT, CATEGORY_ID BIGINT REFERENCES CATEGORIES (ID)); INSERT INTO PRODUCTS (TITLE, PRICE, CATEGORY_ID) VALUES ('Bread', 25, 1), ('Milk', 80, 1), ('Table', 80 ,2), ('Chair', 80, 2);  COMMIT; "
Syntax error in SQL statement " SELECT * FROM CATEGORIES   COMMIT  BEGIN[*];  DROP TABLE IF EXISTS PRODUCTS CASCADE; CREATE TABLE PRODUCTS (ID BIGSERIAL PRIMARY KEY, TITLE VARCHAR(255), PRICE INT, CATEGORY_ID BIGINT REFERENCES CATEGORIES (ID)); INSERT INTO PRODUCTS (TITLE, PRICE, CATEGORY_ID) VALUES ('Bread', 25, 1), ('Milk', 80, 1), ('Table', 80 ,2), ('Chair', 80, 2);  COMMIT; "; SQL statement:
 SELECT * FROM categories   COMMIT  BEGIN;  DROP TABLE IF EXISTS products CASCADE; CREATE TABLE products (id bigserial PRIMARY KEY, title VARCHAR(255), price int, category_id bigint REFERENCES categories (id)); INSERT INTO products (title, price, category_id) VALUES ('Bread', 25, 1), ('Milk', 80, 1), ('Table', 80 ,2), ('Chair', 80, 2);  COMMIT;  [42000-200]
2021-04-23 11:49:27 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "   COMMIT  BEGIN[*];  DROP TABLE IF EXISTS PRODUCTS CASCADE; CREATE TABLE PRODUCTS (ID BIGSERIAL PRIMARY KEY, TITLE VARCHAR(255), PRICE INT, CATEGORY_ID BIGINT REFERENCES CATEGORIES (ID)); INSERT INTO PRODUCTS (TITLE, PRICE, CATEGORY_ID) VALUES ('Bread', 25, 1), ('Milk', 80, 1), ('Table', 80 ,2), ('Chair', 80, 2);  COMMIT; "
Syntax error in SQL statement "   COMMIT  BEGIN[*];  DROP TABLE IF EXISTS PRODUCTS CASCADE; CREATE TABLE PRODUCTS (ID BIGSERIAL PRIMARY KEY, TITLE VARCHAR(255), PRICE INT, CATEGORY_ID BIGINT REFERENCES CATEGORIES (ID)); INSERT INTO PRODUCTS (TITLE, PRICE, CATEGORY_ID) VALUES ('Bread', 25, 1), ('Milk', 80, 1), ('Table', 80 ,2), ('Chair', 80, 2);  COMMIT; "; SQL statement:
   COMMIT  BEGIN;  DROP TABLE IF EXISTS products CASCADE; CREATE TABLE products (id bigserial PRIMARY KEY, title VARCHAR(255), price int, category_id bigint REFERENCES categories (id)); INSERT INTO products (title, price, category_id) VALUES ('Bread', 25, 1), ('Milk', 80, 1), ('Table', 80 ,2), ('Chair', 80, 2);  COMMIT;  [42000-200]
2021-04-23 11:50:05 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Таблица "CATEGORY" не найдена
Table "CATEGORY" not found; SQL statement:
select category0_.id as id1_0_0_, category0_.title as title2_0_0_ from category category0_ where category0_.id=? [42102-200]
